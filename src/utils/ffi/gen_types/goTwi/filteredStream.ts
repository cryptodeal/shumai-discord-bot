// Code generated by tygo. DO NOT EDIT.
import * as fields from './fields';
import * as resources from './resources';

//////////
// source: parameter.go

export interface ListRulesInput {
	/**
	 * Query parameters
	 */
	IDs: string[];
}
export type AddingRules = AddingRule[];
export interface AddingRule {
	value?: string;
	tag?: string;
}
export interface DeletingRules {
	ids: string[];
}
export interface CreateRulesInput {
	/**
	 * JSON body parameter
	 */
	add?: AddingRules;
}
export interface DeleteRulesInput {
	/**
	 * JSON body parameter
	 */
	delete?: DeletingRules;
}
export type SearchStreamBackfillMinutes = number /* int */;
export interface SearchStreamInput {
	/**
	 * Query parameters
	 */
	BackfillMinutes: SearchStreamBackfillMinutes;
	Expansions: fields.ExpansionList;
	MediaFields: fields.MediaFieldList;
	PlaceFields: fields.PlaceFieldList;
	PollFields: fields.PollFieldList;
	TweetFields: fields.TweetFieldList;
	UserFields: fields.UserFieldList;
}

//////////
// source: response.go

export interface ListRulesOutput {
	data: resources.FilterdStreamRule[];
	Meta: resources.ListSearchStreamRulesMeta;
	errors: resources.PartialError[];
}
export interface CreateRulesOutput {
	data: resources.FilterdStreamRule[];
	Meta: resources.CreateSearchStreamRulesMeta;
	errors: resources.PartialError[];
}
export interface DeleteRulesOutput {
	data: resources.FilterdStreamRule[];
	Meta: resources.DeleteSearchStreamRulesMeta;
	errors: resources.PartialError[];
}
export interface SearchStreamMatchedRule {
	tag?: string;
	id?: string;
}
export interface SearchStreamOutput {
	data: resources.Tweet;
	includes?: {
		users?: resources.User[];
		tweets?: resources.Tweet[];
		places?: resources.Place[];
		media?: resources.Media[];
		polls?: resources.Poll[];
	};
	matching_rules?: SearchStreamMatchedRule[];
	errors?: resources.PartialError[];
}
