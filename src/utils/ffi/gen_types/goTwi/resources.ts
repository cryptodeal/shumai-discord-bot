// Code generated by tygo. DO NOT EDIT.

//////////
// source: compliance.go

export enum ComplianceType {
	ComplianceTypeTweets = 'tweets',
	ComplianceTypeUsers = 'users'
}
export interface Compliance {
	id: string;
	resumable: boolean;
	status: string;
	created_at?: string;
	type: ComplianceType;
	name: string;
	upload_url: string;
	upload_expires_at?: string;
	download_url: string;
	download_expires_at?: string;
}

//////////
// source: error.go

export interface Non2XXError {
	errors: ErrorInformation[];
	title?: string;
	detail?: string;
	type?: string;
}
export interface ErrorInformation {
	message: string;
	code?: ErrorCode;
	label?: string;
	parameters?: { [key: string]: string[] };
}
export interface PartialError {
	resource_type?: string;
	field?: string;
	parameter?: string;
	resource_id?: string;
	title?: string;
	section?: string;
	detail?: string;
	value?: string;
	type?: string;
}

//////////
// source: error_code.go

export type ErrorCode = number /* int */;
export interface ErrorCodeDetail {
	Text: string;
	Description: string;
}

//////////
// source: fields.go

export interface Place {
	full_name?: string;
	id?: string;
	contained_within?: string;
	country?: string;
	country_code?: string;
	geo?: IncludeGeo;
	name?: string;
	place_type?: string;
}
export interface Media {
	media_key?: string;
	type?: string;
	duration_ms?: number /* int */;
	height?: number /* int */;
	non_public_metrics?: { [key: string]: number /* int */ | undefined };
	organic_metrics?: { [key: string]: number /* int */ | undefined };
	url?: string;
	preview_image_url?: string;
	promoted_metrics?: { [key: string]: number /* int */ | undefined };
	public_metrics?: { [key: string]: number /* int */ | undefined };
	width?: number /* int */;
	alt_text?: number /* int */;
	variants?: IncludeVariant[];
}
export interface Poll {
	id?: string;
	options: PollOption[];
	duration_minutes?: number /* int */;
	end_datetime?: string;
	voting_status?: string;
}
export interface IncludeGeo {
	type?: string;
	bbox: (number /* float64 */ | undefined)[];
	properties: any;
}
export interface PollOption {
	position?: number /* int */;
	label?: string;
	votes?: number /* int */;
}
export interface IncludeVariant {
	bit_rate: number /* int */;
	content_type: string;
	url: string;
}

//////////
// source: list.go

export interface List {
	id?: string;
	name?: string;
	created_at?: string;
	private?: boolean;
	follower_count?: number /* int */;
	member_count?: number /* int */;
	owner_id?: string;
	description?: string;
}

//////////
// source: meta.go

export interface PaginationMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}
export interface TweetCountRecentMeta {
	total_tweet_count?: number /* int */;
}
export interface TweetCountAllMeta {
	total_tweet_count?: number /* int */;
	next_token?: string;
}
export interface TweetTimelineMeta {
	result_count?: number /* int */;
	newest_id?: string;
	oldest_id?: string;
	next_token?: string;
	previous_token?: string;
}
export interface SpacesLookupByCreatorsIDsMeta {
	result_count?: number /* int */;
}
export interface SpacesLookupTweetsMeta {
	result_count?: number /* int */;
}
export interface ListSearchStreamRulesMeta {
	sent?: string;
}
export interface CreateSearchStreamRulesMeta {
	sent?: string;
	summary: CreateSearchStreamRulesMetaSummary;
}
export interface CreateSearchStreamRulesMetaSummary {
	created: number /* int */;
	not_created: number /* int */;
}
export interface DeleteSearchStreamRulesMeta {
	sent?: string;
	summary: DeleteSearchStreamRulesMetaSummary;
}
export interface DeleteSearchStreamRulesMetaSummary {
	deleted: number /* int */;
	not_deleted: number /* int */;
}
export interface ListLookupOwnedListsMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}
export interface ListMembersListMembershipsMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}
export interface ListMembersGetMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}
export interface ListTweetsLookupMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}
export interface ListFollowsFollowersMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}
export interface ListFollowsFollowedListsMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}
export interface QuoteTweetsMeta {
	result_count?: number /* int */;
	next_token?: string;
	previous_token?: string;
}

//////////
// source: space.go

export interface Space {
	id?: string;
	host_ids?: (string | undefined)[];
	creator_id?: string;
	lang?: string;
	is_ticketed?: boolean;
	invited_user_ids?: (string | undefined)[];
	participant_count?: number /* int */;
	speaker_ids?: (string | undefined)[];
	state?: string;
	title?: string;
	scheduled_start?: string;
	created_at?: string;
	started_at?: string;
	updated_at?: string;
}

//////////
// source: stream_rule.go

export interface FilterdStreamRule {
	id?: string;
	value?: string;
	tag?: string;
}

//////////
// source: tweet.go

export interface Tweet {
	id?: string;
	text?: string;
	edit_history_tweet_ids: (string | undefined)[];
	attachments?: TweetAttachments;
	author_id?: string;
	context_annotations?: ContextAnnotation[];
	conversation_id?: string;
	created_at?: string;
	entities?: TweetEntities;
	geo?: Geo;
	in_reply_to_user_id?: string;
	lang?: string;
	non_public_metrics?: NonPublicMetrics;
	organic_metrics?: OrganicMetrics;
	possibly_sensitive?: boolean;
	promoted_metrics?: PromotedMetrics;
	public_metrics?: TweetPublicMetrics;
	referenced_tweets?: ReferencedTweet[];
	reply_settings?: string;
	source?: string;
	withheld?: TweetWithheld;
}
export interface TweetAttachments {
	media_keys?: string[];
	poll_i_ds?: string[];
}
export interface ContextAnnotation {
	domain: {
		id?: string;
		name?: string;
		description?: string;
	};
	Entity: {
		id?: string;
		name?: string;
	};
}
export interface TweetEntities {
	annotations: Annotation[];
	cashtags: TweetEntityTag[];
	hashtags: TweetEntityTag[];
	mentions: TweetEntityTag[];
	urls: URL[];
}
export interface Annotation {
	start?: number /* int */;
	end?: number /* int */;
	probability?: number /* float64 */;
	type?: string;
	normalized_text?: string;
}
export interface TweetEntityTag {
	start?: number /* int */;
	end?: number /* int */;
	tag?: string;
}
export interface URL {
	start?: number /* int */;
	end?: number /* int */;
	url?: string;
	expanded_url?: string;
	display_url?: string;
	images: URLImage[];
	status?: number /* int */;
	title?: string;
	description?: string;
	unwound_url?: string;
}
export interface URLImage {
	url?: string;
	width?: number /* int */;
	height?: number /* int */;
}
export interface Geo {
	coordinates: {
		type?: string;
		coordinates: (number /* int */ | undefined)[];
	};
	place_id?: string;
}
export interface NonPublicMetrics {
	impression_count?: number /* int */;
	url_link_clicks?: number /* int */;
	user_profile_clicks?: number /* int */;
}
export interface OrganicMetrics {
	impression_count?: number /* int */;
	like_count?: number /* int */;
	reply_count?: number /* int */;
	retweet_count?: number /* int */;
	url_link_clicks?: number /* int */;
	user_profile_clicks?: number /* int */;
}
export interface PromotedMetrics {
	impression_count?: number /* int */;
	like_count?: number /* int */;
	reply_count?: number /* int */;
	retweet_count?: number /* int */;
	url_link_clicks?: number /* int */;
	user_profile_clicks?: number /* int */;
}
export interface TweetPublicMetrics {
	retweet_count?: number /* int */;
	reply_count?: number /* int */;
	like_count?: number /* int */;
	quote_count?: number /* int */;
}
export interface ReferencedTweet {
	type?: string;
	id?: string;
}
export interface TweetWithheld {
	copyright?: boolean;
	country_codes: (string | undefined)[];
}

//////////
// source: tweet_count.go

export interface TweetCount {
	end?: string;
	start?: string;
	tweet_count?: number /* int */;
}

//////////
// source: user.go

export interface User {
	id?: string;
	name?: string;
	username?: string;
	created_at?: string;
	description?: string;
	entities?: UserEntities;
	location?: string;
	pinned_tweet_id?: string;
	profile_image_url?: string;
	protected?: boolean;
	public_metrics?: UserPublicMetrics;
	url?: string;
	verified?: boolean;
	withheld?: UserWithheld;
}
export interface UserEntities {
	url?: UserURL;
	description?: UserDescription;
}
export interface UserURL {
	urls: {
		start?: number /* int */;
		end?: number /* int */;
		url?: string;
		expanded_url?: string;
		display_url?: string;
	}[];
}
export interface UserDescription {
	urls: {
		start?: number /* int */;
		end?: number /* int */;
		url?: string;
		expanded_url?: string;
		display_url?: string;
	}[];
	hashtags: UserEntityTag[];
	mentions: UserEntities[];
	cashtags: UserEntityTag[];
}
export interface UserEntityTag {
	start?: number /* int */;
	end?: number /* int */;
	tag?: string;
}
export interface UserPublicMetrics {
	followers_count?: number /* int */;
	following_count?: number /* int */;
	tweet_count?: number /* int */;
	listed_count?: number /* int */;
}
export interface UserWithheld {
	copyright?: boolean;
	country_codes: (string | undefined)[];
}
